<?php
/**
 * @file
 */

/**
 * Implements hook_init().
 */
function uom_events_init() {
  // Attempts to load the EventsAPI library, if available.
  $library = libraries_detect('EventsAPI');

  // Load the EventsAPI library.
  if (!empty($library['installed']) && !empty($library['library path'])) {
    foreach ($library['files']['php'] as $file) {
      require_once $library['library path'] . '/' . $file;
    }
  }
  else {
    drupal_set_message(t('The EventsAPI library is required by the the <em>uom_events</em> module, but it cannot be found. Please download it from !download and put it in a directory called <em>EventsAPI</em> in your libraries folder.', array('!download' => l($library['download url'], $library['download url']))), 'error');
  }

  drupal_add_css(drupal_get_path('module', 'uom_events') . '/css/uom_events.css');
}

/**
 * Implements hook_permission().
 */
function uom_events_permission() {
  return array(
    'administer uom events' => array(
      'title' => t('Administer UoM Events'),
      'description' => t('Configure the UoM events API.')
    ),
    'view uom events' => array(
      'title' => t('View UoM Events'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function uom_events_menu() {
  $items['admin/config/services/uom-events'] = array(
    'title' => t('UoM Events'),
    'description' => t('Configure the University of Melbourne event API.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uom_events_admin_form'),
    'access arguments' => array('administer uom events'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uom_events.admin.inc',
  );

  $path = variable_get('uom_events_path', 'events');
  $depth = substr_count($path, '/') + 1;

  $items[$path] = array(
    'title' => t('Events'),
    'page callback' => 'uom_events_page',
    'access arguments' => array('view uom events'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uom_events.pages.inc',
  );

	$items[$path . '/past'] = array(
 		'title' => t('Past events'),
 		'page callback' => 'uom_events_past_page',
 		'access arguments' => array('view uom events'),
 		'type' => MENU_NORMAL_ITEM,
 		'file' => 'uom_events.pages.inc',
	);

  $items[$path . '/%'] = array(
    'title' => t('Events'),
    'page callback' => 'uom_events_page',
    'page arguments' => array($depth),
    'access arguments' => array('view uom events'),
    'type' => MENU_CALLBACK,
    'file' => 'uom_events.pages.inc',
  );

  if (module_exists('devel')) {
    $items[$path . '/devel'] = array(
      'title' => t('Events'),
      'page callback' => 'uom_events_page_devel',
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'uom_events.pages.inc',
    );

    $items[$path . '/%/devel'] = array(
      'title' => t('Devel'),
      'page callback' => 'uom_events_page_devel',
      'page arguments' => array($depth),
      'access arguments' => array('access devel info'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'uom_events.pages.inc',
    );
  }

  $items[$path . '/tag/%'] = array(
    'title' => t('Events'),
    'page callback' => 'uom_events_filter_page',
    'page arguments' => array('tag', $depth + 1),
    'access arguments' => array('view uom events'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uom_events.pages.inc',
  );

  $items[$path . '/type/%'] = array(
    'title' => t('Events'),
    'page callback' => 'uom_events_filter_page',
    'page arguments' => array('type', $depth + 1),
    'access arguments' => array('view uom events'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uom_events.pages.inc',
  );

  $items[$path . '/host/%'] = array(
    'title' => t('Events'),
    'page callback' => 'uom_events_filter_page',
    'page arguments' => array('host', $depth + 1),
    'access arguments' => array('view uom events'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uom_events.pages.inc',
  );

  $items[$path . '/presenters'] = array(
    'title' => t('Presenters'),
    'page callback' => 'uom_events_presenters_page',
    'access arguments' => array('view uom events'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uom_events.pages.inc',
  );

  $items[$path . '/presenters/%'] = array(
    'title' => t('Presenters'),
    'page callback' => 'uom_events_presenters_page',
    'page arguments' => array($depth + 1),
    'access arguments' => array('view uom events'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uom_events.pages.inc',
  );

  $items[$path . '/recordings'] = array(
    'title' => t('Recordings'),
    'page callback' => 'uom_events_recordings_page',
    'access arguments' => array('view uom events'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uom_events.pages.inc',
  );

  $items[$path . '/recordings/%'] = array(
    'title' => t('Recordings'),
    'page callback' => 'uom_events_recordings_page',
    'page arguments' => array($depth + 1),
    'access arguments' => array('view uom events'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uom_events.pages.inc',
  );

  $items[$path . '/tags'] = array(
    'title' => t('Tags'),
    'page callback' => 'uom_events_tags_page',
    'access arguments' => array('view uom events'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uom_events.pages.inc',
  );

  $items[$path . '/tags/%'] = array(
    'title' => t('Tags'),
    'page callback' => 'uom_events_tags_page',
    'page arguments' => array($depth + 1),
    'access arguments' => array('view uom events'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uom_events.pages.inc',
  );

  $items[$path . '/hosts'] = array(
    'title' => t('Hosts'),
    'page callback' => 'uom_events_hosts_page',
    'access arguments' => array('view uom events'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uom_events.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function uom_events_libraries_info() {
  $libraries['EventsAPI'] = array(
    'name' => 'UoM Events API',
    'vendor url' => 'http://events.unimelb.edu.au/',
    'download url' => 'https://github.com/cafuego/uom_events_api',
    'version arguments' => array(
      'file' => 'EventsAPI.php',
      // Best practice: Document the actual version strings for later reference.
      //  const EVENTS_API = 'api/v1';
      'pattern' => '/const EVENTS_API = \'api\/v(\d+)\'/',
      'lines' => 25,
    ),
    'files' => array(
      'php' => array('library' => 'EventsAPI.php'),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_block_info().
 */
function uom_events_block_info($delta = '') {
  for ($delta = 0; $delta < variable_get('uom_events_blocks', 1); $delta++) {
    $settings = variable_get('uom_events_block_' . $delta, array());
    $blocks[$delta]['info'] = (empty($settings['description'])) ? t('UoM Events @delta', array('@delta' => $delta)) : $settings['description'];
    $blocks[$delta]['cache'] = DRUPAL_CACHE_PER_USER;
  }

  $blocks['meta']['info'] = t('UoM Events Metadata');
  $blocks['meta']['cache'] = DRUPAL_CACHE_PER_PAGE;
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function uom_events_block_configure($delta = '') {
  if ($delta == 'meta') {
    return array();
  }

  $settings = variable_get('uom_events_block_' . $delta, array());
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Block description'),
    '#default_value' => $settings['description'],
    '#description' => t('A brief description of your block. Used on the <a href="@block-overview-page">block overview page</a>.', array('@block-overview-page' => url('admin/build/block')))
  );
  $form['tag'] = array(
    '#type' => 'textfield',
    '#title' => t('Tag'),
    '#default_value' => $settings['tag'],
    '#description' => t('Enter the tag to filter events for this block.'),
  );

	$form['logic'] = array(
    '#title' => t('Tag logic'),
    '#description' => t('The logic among the event tags'),
    '#type' => 'radios',
    '#default_value' => $settings['logic'],
    '#options' => array('or' => t('OR condition'), 'and' => t('AND condition')),
  );

  $form['number'] = array(
    '#type' => 'textfield',
    '#size' => 2,
    '#title' => t('Events'),
    '#default_value' => $settings['number'],
    '#description' => t('Enter the number of events that should be shown on this block.'),
  );
  $form['items_per_page'] = array(
    '#type' => 'textfield',
    '#size' => 2,
    '#title' => t('Number of events per pagination'),
    '#default_value' => $settings['items_per_page'],
    '#description' => t('Enter the number of events showed on one pagination'),
  );
  $form['more'] = array(
    '#type' => 'textfield',
    '#title' => t('More link'),
    '#default_value' => $settings['more'],
    '#description' => t('Enter a url path to use as the "more" link on this block. Leave empty for no "more" link.'),
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function uom_events_block_save($delta = '', $edit = array()) {
  if ($delta == 'meta') {
    return;
  }

  $settings = array(
    'description' => $edit['description'],
    'tag'         => $edit['tag'],
    'number'      => $edit['number'],
    'more'        => $edit['more'],
    'items_per_page' => $edit['items_per_page'],
    'logic'				=> $edit['logic'],
  );
  variable_set('uom_events_block_' . $delta, $settings);
}

/**
 * Implements hook_block_view().
 */
function uom_events_block_view($delta = '') {
  // Load settings for the current block.
  $settings = variable_get('uom_events_block_' . $delta, array());
  $settings['delta'] = $delta;

	if(isset($settings['logic'])) {	
		$logic_setting = $settings['logic'];
		if (empty($logic_setting)) {
			$logic_setting = 'or';
		}
	}
	else {
		$logic_setting = 'or';
	}	

  // Grab some events via the API.
  $api = uom_events_api();
  $api->displayFull();

  // Do an early return for the metadata block.
  if ($delta == 'meta') {
    // Early return if not looking at an event.
    if (!is_numeric(arg(1))) {
      return;
    }
    $api->displayFull();
    $data = $api->getEvent(arg(1), TRUE);

    // If there is no data to display...
    if (empty($data)) {
      return array();
    }

    return array(
      'subject' => check_plain($data->title),
      'content' => array(
        'image'       => array('#markup' => (empty($data->img_url)) ? '' : theme('image', array('path' => $data->img_url))),
        'speaker'     => array('#markup' => (empty($data->speaker)) ? '' : check_plain($data->speaker)),
        'location'    => array('#markup' => (empty($data->location)) ? '' : theme('uom_event_location', array('location' => $data->location))),
        'information' => array('#markup' => (empty($data->information)) ? '' : theme('uom_event_information', array('information' => $data->information))),
        'booking'     => array('#markup' => (empty($data->booking)) ? '' : theme('uom_event_booking', array('booking' => $data->booking))),
      ),
    );
  }

	$data = array();
  if(!empty($settings['tag'])) {
  	$tag_array = _build_tag_array($settings['tag']);
  
  	// And condition
  	if($logic_setting === 'and') {
  		$multi_tag_data = array();
  		foreach($tag_array as $tag) {
  			$multi_tag_data[] = $api->currentEventsByTag($tag);
  		}
  
  		$multi_tag_data[] = '_my_event_id_compare'; // Put it into last
  		$data = call_user_func_array('array_uintersect', $multi_tag_data);
  		usort($data, "_my_event_compare_asc");

			// Non public events means it only shows on school site
			// Remove non public events
      //$data = array_filter($data, '_uom_events_filter_public_event_callback');
  	}
  	else {
  		// Or condition
  		foreach($tag_array as $tag) {
				$single_tag_data = $api->currentEventsByTag($tag);

				if(is_array($single_tag_data)) {
					if(count($single_tag_data) > 0) {
						foreach($single_tag_data as $single_event) {
							if(!_is_event_included($single_event->id, $data)) {
								$data[] = $single_event;
							}
						}
						usort($data, "_my_event_compare_asc");

						// Non public events means it only shows on school site
						// Remove non public events
						//$data = array_filter($data, '_uom_events_filter_public_event_callback');
					}
				}
				else {
					// Data is not an array, early return.
					return array(
			    	'subject' => '',
			    	'content' => '',
			  	);	
				}
		  }
  	}
  }
  else {
    $data = $api->currentEvents();
  }

  // Shear off superfluous elements...
  if (!empty($settings['number'])) {
    $data = array_slice($data, 0, $settings['number']);
  }

	if (count($data) <= 0) {
		if($delta === '0') {
			$old_data = _get_home_block_event_data($api, $settings['tag']); 
			$output = theme('uom_event_block', array('events' => $old_data, 'settings' => $settings));			

			return array(
        'subject' => t('Events @delta', array('@delta' => $delta)), 
        'content' => '<div id="uom-events-' . $delta . '">' . $output . '</div>', 
      );
		} else {
			// If no data at all, do not display
    	return array(
      	'subject' => '',
      	'content' => '',
    	);
		}
	}
	else {
		$output = theme('uom_event_block', array('events' => $data, 'settings' => $settings));

  	// Output block HTML
		return array(
    	'subject' => t('Events @delta', array('@delta' => $delta)),
    	'content' => '<div id="uom-events-' . $delta . '">' . $output . '</div>',
  	);
	}
}

function _get_home_block_event_data($api, $tag_string = "") {
	$data = array();
	
	if(!empty($tag_string)) {
    $tag_array = _build_tag_array($tag_string);

		if(count($tag_array) > 0) {
			// Get first tag only
			$tag = array_shift(array_values($tag_array));
			$single_tag_data = $api->pastMonthEventsByTag($tag);	
		 	$data = $single_tag_data;
		}
	}

	return $data;
}


function _my_event_id_compare($a, $b) {
	$a_id = $a->id;
	$b_id = $b->id;

	if($a_id > $b_id)
		return 1;
	elseif($a_id === $b_id)
		return 0;
	else
		return -1;
}

/**
 * Implements hook_theme().
 */
function uom_events_theme($existing, $type, $theme, $path) {
  return array(
    'uom_event_list' => array(
      'variables' => array('events' => NULL),
      'base hook' => 'uom_event_list',
      'template' => 'uom-event-list',
      'path' => drupal_get_path('module', 'uom_events') . '/templates',
    ),

		'uom_event_past_list' => array(
      'variables' => array('events' => NULL),
      'base hook' => 'uom_event_past_list',
      'template' => 'uom-event-past-list',
      'path' => drupal_get_path('module', 'uom_events') . '/templates',
    ),		

    'uom_event' => array(
      'variables' => array('event' => NULL),
      'base hook' => 'uom_event',
      'template' => 'uom-event',
      'path' => drupal_get_path('module', 'uom_events') . '/templates',
    ),
    'uom_event_location' => array(
      'variables' => array('location' => NULL),
      'file' => 'uom_events.theme.inc',
    ),
	 'uom_event_location_inline' => array(
  	 'variables' => array('location' => NULL),
     'file' => 'uom_events.theme.inc',
    ),
		'uom_event_presenters_in_event' => array(
			'variables' => array('presenters' => NULL),
     	'file' => 'uom_events.theme.inc',
		),
    'uom_event_information' => array(
      'variables' => array('information' => NULL),
      'file' => 'uom_events.theme.inc',
    ),
    'uom_event_booking' => array(
      'variables' => array('booking' => NULL),
      'file' => 'uom_events.theme.inc',
    ),
    'uom_event_presenter_list' => array(
      'variables' => array('presenters' => NULL),
      'base hook' => 'uom_event_presenter_list',
      'template' => 'uom-event-presenter-list',
      'path' => drupal_get_path('module', 'uom_events') . '/templates',
    ),
    'uom_event_presenter' => array(
      'variables' => array('presenter' => NULL),
      'base hook' => 'uom_event_presenter',
      'template' => 'uom-event-presenter',
      'path' => drupal_get_path('module', 'uom_events') . '/templates',
    ),
    'uom_event_recording_list' => array(
      'variables' => array('recordings' => NULL),
      'base hook' => 'uom_event_recording_list',
      'template' => 'uom-event-recording-list',
      'path' => drupal_get_path('module', 'uom_events') . '/templates',
    ),
    'uom_event_recording' => array(
      'variables' => array('recording' => NULL),
      'base hook' => 'uom_event_recording',
      'template' => 'uom-event-recording',
      'path' => drupal_get_path('module', 'uom_events') . '/templates',
    ),
    'uom_event_tag_list' => array(
      'variables' => array('tags' => NULL),
      'base hook' => 'uom_event_tag_list',
      'template' => 'uom-event-tag-list',
      'path' => drupal_get_path('module', 'uom_events') . '/templates',
    ),
    'uom_event_host_list' => array(
      'variables' => array('hosts' => NULL),
      'base hook' => 'uom_event_host_list',
      'template' => 'uom-event-host-list',
      'path' => drupal_get_path('module', 'uom_events') . '/templates',
    ),
    'uom_event_block' => array(
      'variables' => array('events' => NULL, 'settings' => array()),
      'base hook' => 'uom_event_block',
      'template' => 'uom-event-block',
      'path' => drupal_get_path('module', 'uom_events') . '/templates',
    ),
  );
}

/**
 * Helper that fetches data via drupal_http_request() and optionally
 * caches the result.
 *
 * @param $url
 *   A valid HTTP URL.
 * @param $options
 *   An array of additional options to pass to drupal_http_request().
 *
 * @return
 *   A HTTP response object.
 */
function uom_events_fetcher($url, $options) {
  $period = variable_get('cache_lifetime', 0);

  $hash = md5($url);
  if ($period  && $cache = cache_get('uom_events:' . $hash)) {
    return $cache->data;
  }
  else {
    $response = drupal_http_request($url, $options);
    if ($response->code != 200) {
      watchdog('uom_events', 'Unable to fetch event data from API. Error @code: @status', array('@code' => $response->code, '@status' => $response->status_message));
      // drupal_set_message(t('Unable to fetch event data from API. Error @code: @status', array('@code' => $response->code, '@status' => $response->status_message)));
    }
    elseif ($period) {
      // Cache it for at least 15 minutes, but really should have tweakable expiry.
      cache_set('uom_events:' . $hash, $response, 'cache', time() + $period);
    }
  }
  return $response;
}

/**
 * Helper that parses a drupal_http_request() and does some error checking.
 *
 * @param $response.
 *   A HTTP response object.
 *
 * @return
 *   An object or array of objects on success, FALSE on failure.
 */
function uom_events_parser($response) {
  if ($response->code == 200) {
    return @json_decode($response->data);
  }
  return FALSE;
}

/**
 * Wrapper that returns an initialised API class.
 */
function uom_events_api() {
  $api = new EventsAPI(variable_get('uom_events_token', ''));
  $api->setFetcher('uom_events_fetcher');
  $api->setParser('uom_events_parser');

  return $api;
}

/**
 * Return an array of tags that should not get removed by filter_xss().
 *
 * If an array of tags is defined in $conf['uom_events_allowed_tags'] then
 * that array will be returned. Otherwise, the default set of tags is used.
 */
function uom_events_allowed_tags() {
  global $conf;
   
  if (!empty($conf['uom_events_allowed_tags'])) {
    return $conf['uom_events_allowed_tags'];
  }
  return array('a', 'em', 'strong', 'cite', 'blockquote', 'code', 'ul', 'ol', 'li', 'dl', 'dt', 'dd', 'p', 'br');
}

/**
 * Return an array of date() format strings that should be used for all templates.
 *
 * If an array of tags is defined in $conf['uom_events_date_formats'] then that
 * array will be used.
 */
function uom_events_get_date_formats() {
  global $conf;
  if (!empty($conf['uom_events_date_formats'])) {
    return $conf['uom_events_date_formats'];
  }
  return array('j', 'M', 'Y');
}

/**
 * Return a timestamp formatted every which way.
 */
function uom_events_date_fiddle($timestamp) {
  $output = array();

  foreach (uom_events_get_date_formats() as $format) {
    $output[$format] = date($format, $timestamp);
  }

  return $output;
}

/**
 * Preprocess an event object for the template file.
 */
function uom_events_preprocess_uom_event(&$variables) {
  $event = $variables['event'];
  unset($variables['event']);

  $path = variable_get('uom_events_path', 'events');

  $timestamp_start = strtotime($event->start_time);
  $timestamp_end   = strtotime($event->end_time);

  $variables['id']                = $event->id;
  $variables['title']             = check_plain($event->title);
  $variables['link']              = url($path . '/' . $event->id);
  $variables['description']       = (empty($event->description)) ? '' : check_plain($event->description);
  $variables['description_html']  = (empty($event->description_html)) ? '' : filter_xss($event->description_html, uom_events_allowed_tags());
  $variables['description_text']  = (empty($event->description_text)) ? '' : check_plain($event->description_text);
  $variables['timestamp_start']   = $timestamp_start;
  $variables['timestamp_end']     = $timestamp_end;
  $variables['datestamp_start']   = $event->start_time;
  $variables['datestamp_end']     = $event->end_time;
  $variables['date']              = format_date($timestamp_start, 'long');
  $variables['date_start']        = (empty($event->start_time)) ? '' : format_date($timestamp_start, 'custom', 'l, F j, Y');
  $variables['date_end']          = (empty($event->end_time)) ? '' : format_date($timestamp_end, 'custom', 'l, F j, Y');
  $variables['time_start']        = (empty($event->start_time)) ? '' : format_date($timestamp_start, 'custom', 'G:i');
  $variables['time_end']          = (empty($event->end_time)) ? '' : format_date($timestamp_end, 'custom', 'G:i');
  $variables['speaker']           = (empty($event->speaker)) ? '' : check_plain($event->speaker);
  $variables['presenters']				= (empty($event->presenters)) ? '' : theme('uom_event_presenters_in_event', array('presenters' => $event->presenters));
	$variables['location']          = (empty($event->location)) ? '' : theme('uom_event_location_inline', array('location' => $event->location));
  $variables['information']       = (empty($event->information)) ? '' : theme('uom_event_information', array('information' => $event->information));
  $variables['booking']           = (empty($event->booking)) ? '' : theme('uom_event_booking', array('booking' => $event->booking));
  $variables['host']              = (empty($event->host)) ? '' : check_plain($event->host);
  $variables['image']             = (empty($event->img_url)) ? '' : $event->img_url;
  $variables['type']              = (empty($event->event_type)) ? '' : $event->event_type;
  $variables['bookings_required'] = (empty($event->bookings_required)) ? '' : $event->bookings_required;
  $variables['sold_out']          = (empty($event->sold_out)) ? '' : $event->sold_out;
  $variables['cancelled']         = (empty($event->cancelled)) ? '' : $event->cancelled;
  $variables['original']          = url($event->link);

  $variables['dates']['start']    = uom_events_date_fiddle($timestamp_start);
  $variables['dates']['end']      = uom_events_date_fiddle($timestamp_end);

  $variables['teaser']            = (empty($event->description_text)) ? '' : _uom_events_teaser($event->description_text, 60);
}

/*
 * Preprocess and past event list for a template file
 */
function uom_events_preprocess_uom_event_past_list(&$variables) {
   $events = $variables['events'];
   $variables['events'] = array();
 
   $path = variable_get('uom_events_path', 'events');
 
   // Process the list of event objects into an array of template variables.
   // Wednesday, May 22, 2013 - 18:00–19:00
   foreach ($events as $event) {
     $timestamp_start = strtotime($event->start_time);
     $timestamp_end   = strtotime($event->end_time);
 
     $variables['events'][$event->id] = array(
       'id'               => $event->id, 
       'title'            => check_plain($event->title),
       'link'             => url($path . '/' . $event->id),
       'description'      => (empty($event->description)) ? '' : check_plain($event->description),
       'description_html' => (empty($event->description_html)) ? '' : filter_xss($event->description_html, uom_events_allowed_tags()),
       'description_text' => (empty($event->description_text)) ? '' : check_plain($event->description_text),
       'timestamp_start'  => $timestamp_start,
       'timestamp_end'    => $timestamp_end,
       'datestamp_start'  => $event->start_time, 
       'datestamp_end'    => $event->end_time,
       'date'             => format_date($timestamp_start, 'long'),
       'date_start'       => (empty($event->start_time)) ? '' : format_date($timestamp_start, 'custom', 'l, F j, Y'),
       'date_end'         => (empty($event->end_time)) ? '' : format_date($timestamp_end, 'custom', 'l, F j, Y'),
       'time_start'       => (empty($event->start_time)) ? '' : format_date($timestamp_start, 'custom', 'G:i'),
       'time_end'         => (empty($event->end_time)) ? '' : format_date($timestamp_end, 'custom', 'G:i'),
       'speaker'          => (empty($event->speaker)) ? '' : check_plain($event->speaker),
       'location'         => (empty($event->location)) ? '' : theme('uom_event_location_inline', array('location' => $event->location)),
       'information'      => (empty($event->information)) ? '' : theme('uom_event_information', array('information' => $event->information)),
       'booking'          => (empty($event->booking)) ? '' : theme('uom_event_booking', array('booking' => $event->booking)),
       'host'             => (empty($event->host)) ? '' : check_plain($event->host),
       'image'            => (empty($event->img_url)) ? '' : $event->img_url,
       'type'             => (empty($event->event_type)) ? '' : $event->event_type,
       'has_livestream'   => (empty($event->has_livestream)) ? '' : $event->has_livestream,
       'sold_out'         => (empty($event->sold_out)) ? '' : $event->sold_out,
       'cancelled'        => (empty($event->cancelled)) ? '' : $event->cancelled,
       'original'         => url($event->link),
 
       'dates'            => array(
                               'start' => uom_events_date_fiddle($timestamp_start),
                               'end'   => uom_events_date_fiddle($timestamp_end),
       ),
       'teaser'           => (empty($event->description_text)) ? '' : _uom_events_teaser($event->description_text, 60),
     );
  }
  
	$variables['total_items'] = count($events);	
	
	$default_items_per_page = 10;
	$items_per_page = variable_get('uom_events_past_event_items_per_page', $default_items_per_page);
	$variables['items_per_page'] = (empty($items_per_page)) ? $default_items_per_page : $items_per_page;
}

/**
 * Preprocess an event list array for the template file.
 */
function uom_events_preprocess_uom_event_list(&$variables) {
  $events = $variables['events'];
  $variables['events'] = array();

  $path = variable_get('uom_events_path', 'events');

  // Process the list of event objects into an array of template variables.
  // Wednesday, May 22, 2013 - 18:00–19:00
  foreach ($events as $event) {
    $timestamp_start = strtotime($event->start_time);
    $timestamp_end   = strtotime($event->end_time);

    $variables['events'][$event->id] = array(
      'id'               => $event->id,
      'title'            => check_plain($event->title),
      'link'             => url($path . '/' . $event->id),
      'description'      => (empty($event->description)) ? '' : check_plain($event->description),
      'description_html' => (empty($event->description_html)) ? '' : filter_xss($event->description_html, uom_events_allowed_tags()),
      'description_text' => (empty($event->description_text)) ? '' : check_plain($event->description_text),
      'timestamp_start'  => $timestamp_start,
      'timestamp_end'    => $timestamp_end,
      'datestamp_start'  => $event->start_time,
      'datestamp_end'    => $event->end_time,
      'date'             => format_date($timestamp_start, 'long'),
      'date_start'       => (empty($event->start_time)) ? '' : format_date($timestamp_start, 'custom', 'l, F j, Y'),
      'date_end'         => (empty($event->end_time)) ? '' : format_date($timestamp_end, 'custom', 'l, F j, Y'),
      'time_start'       => (empty($event->start_time)) ? '' : format_date($timestamp_start, 'custom', 'G:i'),
      'time_end'         => (empty($event->end_time)) ? '' : format_date($timestamp_end, 'custom', 'G:i'),
      'speaker'          => (empty($event->speaker)) ? '' : check_plain($event->speaker),
      'location'         => (empty($event->location)) ? '' : theme('uom_event_location_inline', array('location' => $event->location)),
      'information'      => (empty($event->information)) ? '' : theme('uom_event_information', array('information' => $event->information)),
      'booking'          => (empty($event->booking)) ? '' : theme('uom_event_booking', array('booking' => $event->booking)),
      'host'             => (empty($event->host)) ? '' : check_plain($event->host),
      'image'            => (empty($event->img_url)) ? '' : $event->img_url,
      'type'             => (empty($event->event_type)) ? '' : $event->event_type,
      'has_livestream'   => (empty($event->has_livestream)) ? '' : $event->has_livestream,
      'sold_out'         => (empty($event->sold_out)) ? '' : $event->sold_out,
      'cancelled'        => (empty($event->cancelled)) ? '' : $event->cancelled,
      'original'         => url($event->link),

      'dates'            => array(
                              'start' => uom_events_date_fiddle($timestamp_start),
                              'end'   => uom_events_date_fiddle($timestamp_end),
      ),
      'teaser'           => (empty($event->description_text)) ? '' : _uom_events_teaser($event->description_text, 60),
    );
  }

	// Set title and assume this is always upcoming events.
	$the_title = t('Upcoming events');
	drupal_set_title($the_title);
}

/**
 * Preprocess an event list array for the block template file.
 */
function uom_events_preprocess_uom_event_block(&$variables) {
  $events   = $variables['events'];
  $settings = $variables['settings'];
  $variables['events'] = array();

  $path = variable_get('uom_events_path', 'events');

  $variables['delta'] = $settings['delta'];
  $variables['more']  = (empty($settings['more'])) ? '' : l(t('More »'), $settings['more']);

  // Process the list of event objects into an array of template variables.
  // Wednesday, May 22, 2013 - 18:00–19:00
  foreach ($events as $event) {

    $timestamp_start = strtotime($event->start_time);
    $timestamp_end   = strtotime($event->end_time);

    $variables['events'][$event->id] = array(
      'id'               => $event->id,
      'title'            => check_plain($event->title),
      'link'             => url($path . '/' . $event->id),
      'timestamp_start'  => $timestamp_start,
      'timestamp_end'    => $timestamp_end,
      'datestamp_start'  => $event->start_time,
      'datestamp_end'    => $event->end_time,
      'date'             => format_date($timestamp_start, 'long'),
      'date_start'       => (empty($event->start_time)) ? '' : format_date($timestamp_start, 'custom', 'l, F j, Y'),
      'date_end'         => (empty($event->end_time)) ? '' : format_date($timestamp_end, 'custom', 'l, F j, Y'),
      'time_start'       => (empty($event->start_time)) ? '' : format_date($timestamp_start, 'custom', 'G:i'),
      'time_end'         => (empty($event->end_time)) ? '' : format_date($timestamp_end, 'custom', 'G:i'),

      'original'         => $event->link,

      'dates'            => array(
                              'start' => uom_events_date_fiddle($timestamp_start),
                              'end'   => uom_events_date_fiddle($timestamp_end),
                            ),
      'teaser'           => (empty($event->description_text)) ? '' : _uom_events_teaser($event->description_text, 60),
    );
  }
  
  $variables['total_items'] = count($events);
  $default_items_per_page = 5;
  $variables['items_per_page'] = (empty($settings['items_per_page'])) ? $default_items_per_page : $settings['items_per_page'];
}

/**
 * Preprocess a presenter object for the template file.
 */
function uom_events_preprocess_uom_event_presenter(&$variables) {
  $presenter = $variables['presenter'];
  dpm($variables);
  unset($variables['presenter']);


  $path = variable_get('uom_events_path', 'events');

  $variables['id']                          = $presenter->id;
  $variables['link']                        = url($path . '/presenters/' . $presenter->id);
  $variables['title']                       = check_plain($presenter->title);
  $variables['first_name']                  = check_plain($presenter->first_name);
  $variables['last_name']                   = check_plain($presenter->last_name);
  $variables['post_nominal']                = check_plain($presenter->post_nominal);
  $variables['full_name']                   = t('@title @first @last @post', array('@title' => $presenter->title, '@first' => $presenter->first_name, '@last' => $presenter->last_name, '@post' => $presenter->post_nominal));
  $variables['organisation']                = check_plain($presenter->organisation);
  $variables['position_title']              = check_plain($presenter->position_title);
  $variables['biography']                   = check_plain($presenter->biography);
  $variables['biography_html']              = filter_xss($presenter->biography_html, uom_events_allowed_tags());
  $variables['biography_text']              = check_plain($presenter->biography_text);
  $variables['country']                     = check_plain($presenter->country);
  $variables['content_approved_by_speaker'] = $presenter->content_approved_by_speaker;
  $variables['find_an_expert_url']          = url($presenter->find_an_expert_url);
  $variables['photo_url']                   = url($presenter->photo_url);
  $variables['photo']                       = theme('image', array('path' => $presenter->photo_url));
  $variables['original']                    = $presenter->link;
}

/**
 * Preprocess a presenter list array for the template file.
 */
function uom_events_preprocess_uom_event_presenter_list(&$variables) {
  $presenters = $variables['presenters'];
  $variables['presenters'] = array();

  $path = variable_get('uom_events_path', 'events');

  foreach ($presenters as $presenter) {
    $variables['presenters'][$presenter->id] = array(
      'id'             => $presenter->id,
      'link'           => url($path . '/presenters/' . $presenter->id),
      'title'          => check_plain($presenter->title),
      'first_name'     => check_plain($presenter->first_name),
      'last_name'      => check_plain($presenter->last_name),
      'post_nominal'   => check_plain($presenter->post_nominal),
      'full_name'      => t('@title @first @last @post', array('@title' => $presenter->title, '@first' => $presenter->first_name, '@last' => $presenter->last_name, '@post' => $presenter->post_nominal)),
      'organisation'   => check_plain($presenter->organisation),
      'position_title' => check_plain($presenter->position_title),
      'photo_url'      => url($presenter->photo_url),
      'photo'          => theme('image', array('path' => $presenter->photo_url)),
      'original'       => $presenter->link,
    );
  }
}

/**
 * Preprocess a recording list array for the template file.
 */
function uom_events_preprocess_uom_event_recording_list(&$variables) {
  $recordings = $variables['recordings'];
  $variables['recordings'] = array();

  $path = variable_get('uom_events_path', 'events');

  foreach ($recordings as $recording) {
    $variables['recordings'][$recording->id] = array(
      'id'             => $recording->id,
      'link'           => url($path . '/recordings/' . $recording->id),
      'title'          => check_plain($recording->title),
      'source'         => check_plain($recording->source),
      'thumbnail_url'  => url($recording->thumbnail_url),
      'thumbnail'      => theme('image', array('path' => $recording->thumbnail_url)),
      'watch_url'      => url($recording->watch_url),
      'original'       => url($recording->link),
    );
  }
}

/**
 * Preprocess a recording for the template file.
 */
function uom_events_preprocess_uom_event_recording(&$variables) {
  $recording = $variables['recording'];
  $path = variable_get('uom_events_path', 'events');

  $timestamp = strtotime($recording->published_at);

  $variables['id']               = $recording->id;
  $variables['link']             = url($path . '/recordings/' . $recording->id);
  $variables['event_id']         = $recording->event_id;
  $variables['event_link']       = url($path . '/' . $recording->event_id);
  $variables['title']            = check_plain($recording->title);
  $variables['source']           = check_plain($recording->source);
  $variables['description']      = check_plain($recording->description);
  $variables['description_html'] = filter_xss($recording->description_html, uom_events_allowed_tags());
  $variables['thumbnail_url']    = url($recording->thumbnail_url);
  $variables['thumbnail']        = theme('image', array('path' => $recording->thumbnail_url));
  $variables['watch_url']        = url($recording->watch_url);
  if (module_exists('media_youtube')) {
    $options = array('width' => '425', 'height' => '240', 'allowfullscreen' => TRUE);
    $uri = media_parse_to_uri($recording->watch_url);
    $variables['embed'] = theme('media_youtube_video', array('uri' => $uri, 'options' => $options));
  }
  $variables['published_at']     = $recording->published_at;
  $variables['dates']            = uom_events_date_fiddle($timestamp);
  $variables['original']         = url($recording->link);
}

/**
 * Preprocess a tag list array for the template file.
 */
function uom_events_preprocess_uom_event_tag_list(&$variables) {
  $tags = $variables['tags'];
  $variables['tags'] = array();

  $path = variable_get('uom_events_path', 'events');

  foreach ($tags as $tag) {
    $variables['tags'][$tag->tag] = array(
      'title'          => check_plain($tag->tag),
      'tag'            => check_plain($tag->tag),
      'count_events'   => check_plain($tag->count_events),
      'link'           => url($path . '/tag/' . $tag->tag),
    );
  }
}

/**
 * Preprocess a host list array for the template file.
 */
function uom_events_preprocess_uom_event_host_list(&$variables) {
  $hosts = $variables['hosts'];
  $variables['hosts'] = array();

  $path = variable_get('uom_events_path', 'events');

  foreach ($hosts as $host) {
    $variables['hosts'][$host->host_parameterized] = array(
      'title'          => !empty($host->host) ? check_plain($host->host) : t('Untitled'),
      'parameter'      => check_plain($host->host_parameterized),
      'events'         => check_plain($host->count_events),
      'link'           => url($path . '/host/' . $host->host_parameterized),
    );
  }
}

function _build_tag_array($tag_string) {
	// Assume tag is like School Of Historical And Philosophical Studies, katharine viner
	$array = explode("|", $tag_string);
	array_walk($array, "_my_trim");
	return $array;
}

function _my_trim(&$value, $key) {
	$value = trim($value);
}

function _my_event_compare_asc($a, $b)
{
		// Time format is like 20080701T22:38:07
		$a_start_time = strtotime($a->start_time);
		$b_start_time = strtotime($b->start_time);
	
		if($a_start_time > $b_start_time)
			return 1;
		elseif($a_start_time === $b_start_time)
			return 0;
		else
			return -1;	
}

function _my_event_compare_desc($a, $b)
{
		// Time format is like 20080701T22:38:07
		$a_start_time = strtotime($a->start_time);
		$b_start_time = strtotime($b->start_time);
	
		if($a_start_time > $b_start_time)
			return -1;
		elseif($a_start_time === $b_start_time)
			return 0;
		else
			return 1;	
}

function _is_event_included($event_id, $events) {
	if(count($events) > 0) {
		foreach($events as $event) {
			if($event_id === $event->id) {
				return true;
			}
		}
	}
	
	return false;
}

/**
 * Helper (called from tpl.php) that adds js to a page.
 *
 * @TODO: Move into #attached in hook_block_view_alter().
 * @see https://api.drupal.org/api/drupal/modules!block!block.api.php/function/hook_block_view_alter/7
 * @see https://api.drupal.org/comment/44413#comment-44413
 */
function _add_event_javascript($script_name) {
  $scripts = drupal_add_js();
  $script_path = drupal_get_path('module', 'uom_events') . '/js/'. $script_name;

  if(!isset($scripts[$script_path])) {
    drupal_add_js($script_path);
  }
}

/**
 * Helper that returns a trimmed text string.
 */
function _uom_events_teaser($text, $length = 200) {
  if (module_exists('views')) {
    $alter = array(
      'max_length'    => $length,
      'word_boundary' => TRUE,
      'ellipsis'      => TRUE,
      'html'          => FALSE,
    );
    return views_trim_text($alter, $text);
  }

  return text_summary(check_plain($text, NULL, $length));
}

function _uom_events_filter_public_event_callback($element) {
	if(isset($element->public) && $element->public === TRUE) {
    return TRUE;
  }
  return FALSE;
}
