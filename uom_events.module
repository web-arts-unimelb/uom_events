<?php
/**
 * @file
 */

/**
 * Include the API library.
 */
require_once(drupal_get_path('module', 'uom_events') .'/EventsAPI/EventsAPI.php');

/**
 * Implements hook_permission().
 */
function uom_events_permission() {
  return array(
    'administer uom events' => array(
      'title' => t('Administer UoM Events'),
      'description' => t('Configure the UoM events API.')
    ),
    'view uom events' => array(
      'title' => t('View UoM Events'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function uom_events_menu() {
  $items['admin/config/services/uom-events'] = array(
    'title' => t('UoM Events'),
    'description' => t('Configure the University of Melbourne event API.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uom_events_admin_form'),
    'access arguments' => array('administer uom events'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uom_events.admin.inc',
  );

  $items['events'] = array(
    'title' => t('Events'),
    'page callback' => 'uom_events_page',
    'access arguments' => array('view uom events'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uom_events.pages.inc',
  );

  $items['events/%'] = array(
    'title' => t('Events'),
    'page callback' => 'uom_events_page',
    'page arguments' => array(1),
    'access arguments' => array('view uom events'),
    'type' => MENU_CALLBACK,
    'file' => 'uom_events.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function uom_events_theme($existing, $type, $theme, $path) {
  return array(
    'uom_event_list' => array(
      'variables' => array('events' => NULL),
      'base hook' => 'uom_event_list',
      'template' => 'uom-event-list',
      'path' => drupal_get_path('module', 'uom_events') . '/templates',
    ),
    'uom_event' => array(
      'variables' => array('event' => NULL),
      'base hook' => 'uom_event',
      'template' => 'uom-event',
      'path' => drupal_get_path('module', 'uom_events') . '/templates',
    ),
    'uom_event_location' => array(
      'variables' => array('location' => NULL),
      'file' => 'uom_events.theme.inc',
    ),
    'uom_event_information' => array(
      'variables' => array('information' => NULL),
      'file' => 'uom_events.theme.inc',
    ),
    'uom_event_booking' => array(
      'variables' => array('booking' => NULL),
      'file' => 'uom_events.theme.inc',
    ),
  );
}

/**
 * Helper that fetches data via drupal_http_request() and caches the result.
 *
 * @param $url
 *   A valid HTTP URL.
 * @param $options
 *   An array of additional options to pass to drupal_http_request().
 *
 * @return
 *   A HTTP response object.
 */
function uom_events_fetcher($url, $options) {
  $hash = md5($url);
  if ($cache = cache_get('uom_events_' . $hash)) {
    return $cache->data;
  }
  else {
    $response = drupal_http_request($url, $options);
    if ($response->code != 200) {
      drupal_set_message(t('Unable to fetch event data from API. Error @code: @status', array('@code' => $response->code, '@status' => $response->status_message)));
    }
    else {
      // Cache it for at least 15 minutes, but really should have tweakable expiry.
      cache_set('uom_events_' . $hash, $response, 'cache', time() + 900);
    }
  }
  return $response;
}

/**
 * Helper that parses a drupal_http_request() and does some error checking.
 *
 * @param $response.
 *   A HTTP response object.
 *
 * @return
 *   An object or array of objects on success, FALSE on failure.
 */
function uom_events_parser($response) {
  if ($response->code == 200) {
    return @json_decode($response->data);
  }
  drupal_set_message(t('Unable to fetch event data from API. Error @code: @status', array('@code' => $response->code, '@status' => $response->status_message)));
  return FALSE;
}


/**
 * Preprocess an event object for the template file.
 */
function uom_events_preprocess_uom_event(&$variables) {
  $event = $variables['event'];
  unset($variables['event']);

  $timestamp_start = strtotime($event->start_time);
  $timestamp_end   = strtotime($event->end_time);

  $variables['id']                = $event->id;
  $variables['title']             = check_plain($event->title);
  $variables['link']              = url('events/'. $event->id);
  $variables['description']       = (empty($event->description)) ? '' : check_plain($event->description);
  $variables['description_html']  = (empty($event->description_html)) ? '' : filter_xss($event->description_html);
  $variables['description_text']  = (empty($event->description_text)) ? '' : check_plain($event->description_text);
  $variables['timestamp_start']   = $event->start_time;
  $variables['timestamp_end']     = $event->end_time;
  $variables['date']              = format_date($timestamp_start, 'long');
  $variables['date_start']        = (empty($event->start_time)) ? '' : format_date($timestamp_start, 'custom', 'l, F j, Y');
  $variables['date_end']          = (empty($event->end_time)) ? '' : format_date($timestamp_end, 'custom', 'l, F j, Y');
  $variables['time_start']        = (empty($event->start_time)) ? '' : format_date($timestamp_start, 'custom', 'G:i');
  $variables['time_end']          = (empty($event->end_time)) ? '' : format_date($timestamp_end, 'custom', 'G:i');
  $variables['speaker']           = (empty($event->speaker)) ? '' : check_plain($event->speaker);
  $variables['location']          = (empty($event->location)) ? '' : theme('uom_event_location', array('location' => $event->location));
  $variables['information']       = (empty($event->information)) ? '' : theme('uom_event_information', array('information' => $event->information));
  $variables['booking']           = (empty($event->booking)) ? '' : theme('uom_event_booking', array('booking' => $event->booking));
  $variables['host']              = (empty($event->host)) ? '' : check_plain($event->host);
  $variables['image']             = (empty($event->img_url)) ? '' : $event->img_url;
  $variables['type']              = (empty($event->event_type)) ? '' : $event->event_type;
  $variables['bookings_required'] = (empty($event->bookings_required)) ? '' : $event->bookings_required;
  $variables['sold_out']          = (empty($event->sold_out)) ? '' : $event->sold_out;
  $variables['cancelled']         = (empty($event->cancelled)) ? '' : $event->cancelled;
}

/**
 * Preprocess an event list array for the template file.
 */
function uom_events_preprocess_uom_event_list(&$variables) {
  $events = $variables['events'];
  unset($variables['events']);

  // Process the list of event objects into an array of template variables.
  // Wednesday, May 22, 2013 - 18:00â€“19:00
  foreach ($events as $event) {

    $timestamp_start = strtotime($event->start_time);
    $timestamp_end   = strtotime($event->end_time);

    $variables['events'][$event->id] = array(
      'id'               => $event->id,
      'title'            => check_plain($event->title),
      'link'             => url('events/'. $event->id),
      'description'      => (empty($event->description)) ? '' : check_plain($event->description),
      'description_html' => (empty($event->description_html)) ? '' : filter_xss($event->description_html),
      'description_text' => (empty($event->description_text)) ? '' : check_plain($event->description_text),
      'timestamp_start'  => $event->start_time,
      'timestamp_end'    => $event->end_time,
      'date'             => format_date($timestamp_start, 'long'),
      'date_start'       => (empty($event->start_time)) ? '' : format_date($timestamp_start, 'custom', 'l, F j, Y'),
      'date_end'         => (empty($event->end_time)) ? '' : format_date($timestamp_end, 'custom', 'l, F j, Y'),
      'time_start'       => (empty($event->start_time)) ? '' : format_date($timestamp_start, 'custom', 'G:i'),
      'time_end'         => (empty($event->end_time)) ? '' : format_date($timestamp_end, 'custom', 'G:i'),
      'speaker'          => (empty($event->speaker)) ? '' : check_plain($event->speaker),
      'location'         => (empty($event->location)) ? '' : theme('uom_event_location', array('location' => $event->location)),
      'information'      => (empty($event->information)) ? '' : theme('uom_event_information', array('information' => $event->information)),
      'booking'          => (empty($event->booking)) ? '' : theme('uom_event_booking', array('booking' => $event->booking)),
      'host'             => (empty($event->host)) ? '' : check_plain($event->host),
      'image'            => (empty($event->img_url)) ? '' : $event->img_url,
      'type'             => (empty($event->event_type)) ? '' : $event->event_type,
      'has_livestream'   => (empty($event->has_livestream)) ? '' : $event->has_livestream,
      'sold_out'         => (empty($event->sold_out)) ? '' : $event->sold_out,
      'cancelled'        => (empty($event->cancelled)) ? '' : $event->cancelled,
    );
  }
}
